import React, { Component } from 'react';
//We going to use this library, specifically the 'connect' to make book-list into a Container so
//so it can be connected to redux.
import { connect } from 'react-redux';
//Import Action Creator
import { selectBook } from '../actions/index'
//This import bindActionCreator is going to make sure the action generated by ActionCreator
//is going to flow to all the reducers
import { bindActionCreators } from 'redux';

class BookList extends Component {
  renderList() {
    return this.props.books.map((book) => {
      return (
        <li
          key={book.title}
          onClick={() => this.props.selectBook(book)}
          className="list-group-item">
          {book.title}
        </li>
      );
    });
  }



  render() {
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    );
  }
}

//The purpose is to take an application state as an argument. Our state contains the array of books
//and active book.
function mapStateToProps(state) {
  //Whatever is returned from this function will show up as props
  //inside of BookList
  return {
    books: state.books
  };
}
//Anything return from this function will end up as props
//on BookList container
function mapDispatchToProps(dispatch) {
  //Whenever our Action Creator: selectBook is called, the return result(dispatch) should be
  //passed to all our reducers.
  //bindActionCreator is what allows us to do this.
  return bindActionCreators({ selectBook: selectBook }, dispatch);
}
//connect takes functions and a component to produce a container.
//The container is a component that is aware of the state that it is contain by redux.
//The states will be available as props.
export default connect(mapStateToProps, mapDispatchToProps)(BookList)
